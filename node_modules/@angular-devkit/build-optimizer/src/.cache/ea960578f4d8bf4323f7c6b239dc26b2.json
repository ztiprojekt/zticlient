{"remainingRequest":"C:\\Projects\\zticlient\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Projects\\zticlient\\node_modules\\@angular\\cdk\\esm5\\table.es5.js","dependencies":[{"path":"C:\\Projects\\zticlient\\node_modules\\@angular\\cdk\\esm5\\table.es5.js","mtime":499162500000},{"path":"C:\\Projects\\zticlient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535745673876},{"path":"C:\\Projects\\zticlient\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START tslib,_angular_core,_angular_cdk_collections,rxjs_operators,rxjs,_angular_common PURE_IMPORTS_END */\nimport { __extends } from 'tslib';\nimport { ChangeDetectionStrategy, Component, Directive, IterableDiffers, TemplateRef, ViewContainerRef, ViewEncapsulation, ContentChild, ElementRef, Input, Attribute, ChangeDetectorRef, ContentChildren, EmbeddedViewRef, isDevMode, ViewChild, NgModule } from '@angular/core';\nimport { DataSource } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { takeUntil } from 'rxjs/operators';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nvar /** @type {?} */ CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nvar /**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */ BaseRowDef = /*@__PURE__*/ (function () {\n    function BaseRowDef(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    BaseRowDef.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n            // of the columns property or an empty array if none is provided.\n            var /** @type {?} */ columns = changes['columns'].currentValue || [];\n            if (!this._columnsDiffer) {\n                this._columnsDiffer = this._differs.find(columns).create();\n                this._columnsDiffer.diff(columns);\n            }\n        };\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    BaseRowDef.prototype.getColumnsDiff = /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n        function () {\n            return this._columnsDiffer.diff(this.columns);\n        };\n    return BaseRowDef;\n}());\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nvar CdkHeaderRowDef = /*@__PURE__*/ (function (_super) {\n    __extends(CdkHeaderRowDef, _super);\n    function CdkHeaderRowDef(template, _differs) {\n        return _super.call(this, template, _differs) || this;\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    CdkHeaderRowDef.prototype.extractCellTemplate = /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n        function (column) {\n            return column.headerCell.template;\n        };\n    return CdkHeaderRowDef;\n}(BaseRowDef));\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nvar CdkFooterRowDef = /*@__PURE__*/ (function (_super) {\n    __extends(CdkFooterRowDef, _super);\n    function CdkFooterRowDef(template, _differs) {\n        return _super.call(this, template, _differs) || this;\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    CdkFooterRowDef.prototype.extractCellTemplate = /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n        function (column) {\n            return column.footerCell.template;\n        };\n    return CdkFooterRowDef;\n}(BaseRowDef));\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nvar CdkRowDef = /*@__PURE__*/ (function (_super) {\n    __extends(CdkRowDef, _super);\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    function CdkRowDef(template, _differs) {\n        return _super.call(this, template, _differs) || this;\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    CdkRowDef.prototype.extractCellTemplate = /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n        function (column) {\n            return column.cell.template;\n        };\n    return CdkRowDef;\n}(BaseRowDef));\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nvar CdkCellOutlet = /*@__PURE__*/ (function () {\n    function CdkCellOutlet(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    CdkCellOutlet.mostRecentCellOutlet = null;\n    return CdkCellOutlet;\n}());\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nvar CdkHeaderRow = /*@__PURE__*/ (function () {\n    function CdkHeaderRow() {\n    }\n    return CdkHeaderRow;\n}());\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nvar CdkFooterRow = /*@__PURE__*/ (function () {\n    function CdkFooterRow() {\n    }\n    return CdkFooterRow;\n}());\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nvar CdkRow = /*@__PURE__*/ (function () {\n    function CdkRow() {\n    }\n    return CdkRow;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nvar CdkCellDef = /*@__PURE__*/ (function () {\n    function CdkCellDef(template) {\n        this.template = template;\n    }\n    return CdkCellDef;\n}());\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nvar CdkHeaderCellDef = /*@__PURE__*/ (function () {\n    function CdkHeaderCellDef(template) {\n        this.template = template;\n    }\n    return CdkHeaderCellDef;\n}());\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nvar CdkFooterCellDef = /*@__PURE__*/ (function () {\n    function CdkFooterCellDef(template) {\n        this.template = template;\n    }\n    return CdkFooterCellDef;\n}());\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nvar CdkColumnDef = /*@__PURE__*/ (function () {\n    function CdkColumnDef() {\n    }\n    Object.defineProperty(CdkColumnDef.prototype, \"name\", {\n        get: /**\n         * Unique name for this column.\n         * @return {?}\n         */ function () { return this._name; },\n        set: /**\n         * @param {?} name\n         * @return {?}\n         */ function (name) {\n            // If the directive is set without a name (updated programatically), then this setter will\n            // trigger with an empty string and should not overwrite the programatically set value.\n            if (!name) {\n                return;\n            }\n            this._name = name;\n            this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CdkColumnDef;\n}());\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nvar /**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */ BaseCdkCell = /*@__PURE__*/ (function () {\n    function BaseCdkCell(columnDef, elementRef) {\n        var /** @type {?} */ columnClassName = \"cdk-column-\" + columnDef.cssClassFriendlyName;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n    return BaseCdkCell;\n}());\n/**\n * Header cell template container that adds the right classes and role.\n */\nvar CdkHeaderCell = /*@__PURE__*/ (function (_super) {\n    __extends(CdkHeaderCell, _super);\n    function CdkHeaderCell(columnDef, elementRef) {\n        return _super.call(this, columnDef, elementRef) || this;\n    }\n    return CdkHeaderCell;\n}(BaseCdkCell));\n/**\n * Footer cell template container that adds the right classes and role.\n */\nvar CdkFooterCell = /*@__PURE__*/ (function (_super) {\n    __extends(CdkFooterCell, _super);\n    function CdkFooterCell(columnDef, elementRef) {\n        return _super.call(this, columnDef, elementRef) || this;\n    }\n    return CdkFooterCell;\n}(BaseCdkCell));\n/**\n * Cell template container that adds the right classes and role.\n */\nvar CdkCell = /*@__PURE__*/ (function (_super) {\n    __extends(CdkCell, _super);\n    function CdkCell(columnDef, elementRef) {\n        return _super.call(this, columnDef, elementRef) || this;\n    }\n    return CdkCell;\n}(BaseCdkCell));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(\"Could not find column with id \\\"\" + id + \"\\\".\");\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(\"Duplicate column definition name provided: \\\"\" + name + \"\\\".\");\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError() {\n    return Error(\"Could not find a matching row definition for the provided row data.\");\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header and row, ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(\"Provided data source did not match an array, Observable, or DataSource\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nvar DataRowOutlet = /*@__PURE__*/ (function () {\n    function DataRowOutlet(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    return DataRowOutlet;\n}());\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nvar HeaderRowOutlet = /*@__PURE__*/ (function () {\n    function HeaderRowOutlet(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    return HeaderRowOutlet;\n}());\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nvar FooterRowOutlet = /*@__PURE__*/ (function () {\n    function FooterRowOutlet(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    return FooterRowOutlet;\n}());\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n */\nvar /** @type {?} */ CDK_TABLE_TEMPLATE = \"\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\";\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * \\@docs-private\n * @abstract\n * @template T\n */\nvar /**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * \\@docs-private\n * @abstract\n * @template T\n */ RowViewRef = /*@__PURE__*/ (function (_super) {\n    __extends(RowViewRef, _super);\n    function RowViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return RowViewRef;\n}(EmbeddedViewRef));\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nvar CdkTable = /*@__PURE__*/ (function () {\n    function CdkTable(_differs, _changeDetectorRef, _elementRef, role) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Row definitions that were defined outside of the direct content children of the table.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked.\n         */\n        this._headerRowDefChanged = false;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked.\n         */\n        this._footerRowDefChanged = false;\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n    }\n    Object.defineProperty(CdkTable.prototype, \"trackBy\", {\n        get: /**\n         * Tracking function that will be used to check the differences in data changes. Used similarly\n         * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n         * relative to the function to know if a row should be added/removed/moved.\n         * Accepts a function that takes two parameters, `index` and `item`.\n         * @return {?}\n         */ function () { return this._trackByFn; },\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */ function (fn) {\n            if (isDevMode() &&\n                fn != null && typeof fn !== 'function' && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\n                console.warn(\"trackBy must be a function, but received \" + JSON.stringify(fn) + \".\");\n            }\n            this._trackByFn = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTable.prototype, \"dataSource\", {\n        get: /**\n         * The table's source of data, which can be provided in three ways (in order of complexity):\n         *   - Simple data array (each object represents one table row)\n         *   - Stream that emits a data array each time the array changes\n         *   - `DataSource` object that implements the connect/disconnect interface.\n         *\n         * If a data array is provided, the table must be notified when the array's objects are\n         * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n         * render the diff since the last table render. If the data array reference is changed, the table\n         * will automatically trigger an update to the rows.\n         *\n         * When providing an Observable stream, the table will trigger an update automatically when the\n         * stream emits a new array of data.\n         *\n         * Finally, when providing a `DataSource` object, the table will use the Observable stream\n         * provided by the connect function and trigger updates when that stream emits new data array\n         * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n         * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n         * subscriptions registered during the connect process).\n         * @return {?}\n         */ function () { return this._dataSource; },\n        set: /**\n         * @param {?} dataSource\n         * @return {?}\n         */ function (dataSource) {\n            if (this._dataSource !== dataSource) {\n                this._switchDataSource(dataSource);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkTable.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this._elementRef.nativeElement.nodeName === 'TABLE') {\n                this._applyNativeTableSections();\n            }\n            // TODO(andrewseguin): Setup a listener for scrolling, emit the calculated view to viewChange\n            this._dataDiffer = this._differs.find([]).create(this._trackByFn);\n            // If the table has header or footer row definitions defined as part of its content, mark that\n            // there is a change so that the content check will render the row.\n            this._headerRowDefChanged = !!this._headerRowDef;\n            this._footerRowDefChanged = !!this._footerRowDef;\n        };\n    /**\n     * @return {?}\n     */\n    CdkTable.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n        function () {\n            // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n            this._cacheRowDefs();\n            this._cacheColumnDefs();\n            // Make sure that the user has at least added header, footer, or data row def.\n            if (!this._headerRowDef && !this._footerRowDef && !this._rowDefs.length) {\n                throw getTableMissingRowDefsError();\n            }\n            // Render updates if the list of columns have been changed for the header, row, or footer defs.\n            this._renderUpdatedColumns();\n            // If the header row definition has been changed, trigger a render to the header row.\n            if (this._headerRowDefChanged) {\n                this._renderHeaderRow();\n                this._headerRowDefChanged = false;\n            }\n            // If the footer row definition has been changed, trigger a render to the footer row.\n            if (this._footerRowDefChanged) {\n                this._renderFooterRow();\n                this._footerRowDefChanged = false;\n            }\n            // If there is a data source and row definitions, connect to the data source unless a\n            // connection has already been made.\n            if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n                this._observeRenderChanges();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CdkTable.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._rowOutlet.viewContainer.clear();\n            this._headerRowOutlet.viewContainer.clear();\n            this._footerRowOutlet.viewContainer.clear();\n            this._onDestroy.next();\n            this._onDestroy.complete();\n            if (this.dataSource instanceof DataSource) {\n                this.dataSource.disconnect(this);\n            }\n        };\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    CdkTable.prototype.renderRows = /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ changes = this._dataDiffer.diff(this._data);\n            if (!changes) {\n                return;\n            }\n            var /** @type {?} */ viewContainer = this._rowOutlet.viewContainer;\n            changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n                if (record.previousIndex == null) {\n                    _this._insertRow(record.item, currentIndex);\n                }\n                else if (currentIndex == null) {\n                    viewContainer.remove(adjustedPreviousIndex);\n                }\n                else {\n                    var /** @type {?} */ view = (viewContainer.get(adjustedPreviousIndex));\n                    viewContainer.move(/** @type {?} */ ((view)), currentIndex);\n                }\n            });\n            // Update the meta context of a row's context data (index, count, first, last, ...)\n            this._updateRowIndexContext();\n            // Update rows that did not get added/removed/moved but may have had their identity changed,\n            // e.g. if trackBy matched data on some property but the actual data reference changed.\n            changes.forEachIdentityChange(function (record) {\n                var /** @type {?} */ rowView = (viewContainer.get(/** @type {?} */ ((record.currentIndex))));\n                rowView.context.$implicit = record.item;\n            });\n        };\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     */\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.setHeaderRowDef = /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n        function (headerRowDef) {\n            this._headerRowDef = headerRowDef;\n            this._headerRowDefChanged = true;\n        };\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     */\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.setFooterRowDef = /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n        function (footerRowDef) {\n            this._footerRowDef = footerRowDef;\n            this._footerRowDefChanged = true;\n        };\n    /** Adds a column definition that was not included as part of the direct content children. */\n    /**\n     * Adds a column definition that was not included as part of the direct content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    CdkTable.prototype.addColumnDef = /**\n     * Adds a column definition that was not included as part of the direct content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n        function (columnDef) {\n            this._customColumnDefs.add(columnDef);\n        };\n    /** Removes a column definition that was not included as part of the direct content children. */\n    /**\n     * Removes a column definition that was not included as part of the direct content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    CdkTable.prototype.removeColumnDef = /**\n     * Removes a column definition that was not included as part of the direct content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n        function (columnDef) {\n            this._customColumnDefs.delete(columnDef);\n        };\n    /** Adds a row definition that was not included as part of the direct content children. */\n    /**\n     * Adds a row definition that was not included as part of the direct content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    CdkTable.prototype.addRowDef = /**\n     * Adds a row definition that was not included as part of the direct content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n        function (rowDef) {\n            this._customRowDefs.add(rowDef);\n        };\n    /** Removes a row definition that was not included as part of the direct content children. */\n    /**\n     * Removes a row definition that was not included as part of the direct content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    CdkTable.prototype.removeRowDef = /**\n     * Removes a row definition that was not included as part of the direct content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n        function (rowDef) {\n            this._customRowDefs.delete(rowDef);\n        };\n    /**\n     * Update the map containing the content's column definitions.\n     * @return {?}\n     */\n    CdkTable.prototype._cacheColumnDefs = /**\n     * Update the map containing the content's column definitions.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._columnDefsByName.clear();\n            var /** @type {?} */ columnDefs = this._contentColumnDefs ? this._contentColumnDefs.toArray() : [];\n            this._customColumnDefs.forEach(function (columnDef) { return columnDefs.push(columnDef); });\n            columnDefs.forEach(function (columnDef) {\n                if (_this._columnDefsByName.has(columnDef.name)) {\n                    throw getTableDuplicateColumnNameError(columnDef.name);\n                }\n                _this._columnDefsByName.set(columnDef.name, columnDef);\n            });\n        };\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @return {?}\n     */\n    CdkTable.prototype._cacheRowDefs = /**\n     * Update the list of all available row definitions that can be used.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._rowDefs = this._contentRowDefs ? this._contentRowDefs.toArray() : [];\n            this._customRowDefs.forEach(function (rowDef) { return _this._rowDefs.push(rowDef); });\n            var /** @type {?} */ defaultRowDefs = this._rowDefs.filter(function (def) { return !def.when; });\n            if (defaultRowDefs.length > 1) {\n                throw getTableMultipleDefaultRowDefsError();\n            }\n            this._defaultRowDef = defaultRowDefs[0];\n        };\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display.\n     * If there is a diff, then re-render that section.\n     * @return {?}\n     */\n    CdkTable.prototype._renderUpdatedColumns = /**\n     * Check if the header, data, or footer rows have changed what columns they want to display.\n     * If there is a diff, then re-render that section.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // Re-render the rows when the row definition columns change.\n            this._rowDefs.forEach(function (def) {\n                if (!!def.getColumnsDiff()) {\n                    // Reset the data to an empty array so that renderRowChanges will re-render all new rows.\n                    // Reset the data to an empty array so that renderRowChanges will re-render all new rows.\n                    _this._dataDiffer.diff([]);\n                    _this._rowOutlet.viewContainer.clear();\n                    _this.renderRows();\n                }\n            });\n            // Re-render the header row if there is a difference in its columns.\n            if (this._headerRowDef && this._headerRowDef.getColumnsDiff()) {\n                this._renderHeaderRow();\n            }\n            // Re-render the footer row if there is a difference in its columns.\n            if (this._footerRowDef && this._footerRowDef.getColumnsDiff()) {\n                this._renderFooterRow();\n            }\n        };\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @param {?} dataSource\n     * @return {?}\n     */\n    CdkTable.prototype._switchDataSource = /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @param {?} dataSource\n     * @return {?}\n     */\n        function (dataSource) {\n            this._data = [];\n            if (this.dataSource instanceof DataSource) {\n                this.dataSource.disconnect(this);\n            }\n            // Stop listening for data from the previous data source.\n            if (this._renderChangeSubscription) {\n                this._renderChangeSubscription.unsubscribe();\n                this._renderChangeSubscription = null;\n            }\n            if (!dataSource) {\n                if (this._dataDiffer) {\n                    this._dataDiffer.diff([]);\n                }\n                this._rowOutlet.viewContainer.clear();\n            }\n            this._dataSource = dataSource;\n        };\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @return {?}\n     */\n    CdkTable.prototype._observeRenderChanges = /**\n     * Set up a subscription for the data provided by the data source.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // If no data source has been set, there is nothing to observe for changes.\n            if (!this.dataSource) {\n                return;\n            }\n            var /** @type {?} */ dataStream;\n            // Check if the datasource is a DataSource object by observing if it has a connect function.\n            // Cannot check this.dataSource['connect'] due to potential property renaming, nor can it\n            // checked as an instanceof DataSource<T> since the table should allow for data sources\n            // that did not explicitly extend DataSource<T>.\n            if (((this.dataSource)).connect instanceof Function) {\n                dataStream = ((this.dataSource)).connect(this);\n            }\n            else if (this.dataSource instanceof Observable) {\n                dataStream = this.dataSource;\n            }\n            else if (Array.isArray(this.dataSource)) {\n                dataStream = of(this.dataSource);\n            }\n            if (dataStream === undefined) {\n                throw getTableUnknownDataSourceError();\n            }\n            this._renderChangeSubscription = dataStream\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(function (data) {\n                _this._data = data;\n                _this.renderRows();\n            });\n        };\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @return {?}\n     */\n    CdkTable.prototype._renderHeaderRow = /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @return {?}\n     */\n        function () {\n            // Clear the footer row outlet if any content exists.\n            if (this._headerRowOutlet.viewContainer.length > 0) {\n                this._headerRowOutlet.viewContainer.clear();\n            }\n            this._renderRow(this._headerRowOutlet, this._headerRowDef);\n        };\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @return {?}\n     */\n    CdkTable.prototype._renderFooterRow = /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @return {?}\n     */\n        function () {\n            // Clear the footer row outlet if any content exists.\n            if (this._footerRowOutlet.viewContainer.length > 0) {\n                this._footerRowOutlet.viewContainer.clear();\n            }\n            this._renderRow(this._footerRowOutlet, this._footerRowDef);\n        };\n    /**\n     * Finds the matching row definition that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definition that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    /**\n     * Finds the matching row definition that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definition that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n    CdkTable.prototype._getRowDef = /**\n     * Finds the matching row definition that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definition that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n        function (data, i) {\n            if (this._rowDefs.length == 1) {\n                return this._rowDefs[0];\n            }\n            var /** @type {?} */ rowDef = this._rowDefs.find(function (def) { return def.when && def.when(i, data); }) || this._defaultRowDef;\n            if (!rowDef) {\n                throw getTableMissingMatchingRowDefError();\n            }\n            return rowDef;\n        };\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @param {?} rowData\n     * @param {?} index\n     * @return {?}\n     */\n    CdkTable.prototype._insertRow = /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @param {?} rowData\n     * @param {?} index\n     * @return {?}\n     */\n        function (rowData, index) {\n            var /** @type {?} */ rowDef = this._getRowDef(rowData, index);\n            var /** @type {?} */ context = { $implicit: rowData };\n            this._renderRow(this._rowOutlet, rowDef, context, index);\n        };\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    CdkTable.prototype._renderRow = /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n        function (outlet, rowDef, context, index) {\n            if (context === void 0) {\n                context = {};\n            }\n            if (index === void 0) {\n                index = 0;\n            }\n            // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n            outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n            for (var _i = 0, _a = this._getCellTemplates(rowDef); _i < _a.length; _i++) {\n                var cellTemplate = _a[_i];\n                if (CdkCellOutlet.mostRecentCellOutlet) {\n                    CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n                }\n            }\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @return {?}\n     */\n    CdkTable.prototype._updateRowIndexContext = /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ viewContainer = this._rowOutlet.viewContainer;\n            for (var /** @type {?} */ index = 0, /** @type {?} */ count = viewContainer.length; index < count; index++) {\n                var /** @type {?} */ viewRef = (viewContainer.get(index));\n                viewRef.context.index = index;\n                viewRef.context.count = count;\n                viewRef.context.first = index === 0;\n                viewRef.context.last = index === count - 1;\n                viewRef.context.even = index % 2 === 0;\n                viewRef.context.odd = !viewRef.context.even;\n            }\n        };\n    /**\n     * Gets the column definitions for the provided row def.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    CdkTable.prototype._getCellTemplates = /**\n     * Gets the column definitions for the provided row def.\n     * @param {?} rowDef\n     * @return {?}\n     */\n        function (rowDef) {\n            var _this = this;\n            if (!rowDef || !rowDef.columns) {\n                return [];\n            }\n            return Array.from(rowDef.columns, function (columnId) {\n                var /** @type {?} */ column = _this._columnDefsByName.get(columnId);\n                if (!column) {\n                    throw getTableUnknownColumnError(columnId);\n                }\n                return rowDef.extractCellTemplate(column);\n            });\n        };\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @return {?}\n     */\n    CdkTable.prototype._applyNativeTableSections = /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ sections = [\n                { tag: 'thead', outlet: this._headerRowOutlet },\n                { tag: 'tbody', outlet: this._rowOutlet },\n                { tag: 'tfoot', outlet: this._footerRowOutlet },\n            ];\n            for (var _i = 0, sections_1 = sections; _i < sections_1.length; _i++) {\n                var section = sections_1[_i];\n                var /** @type {?} */ element = document.createElement(section.tag);\n                element.appendChild(section.outlet.elementRef.nativeElement);\n                this._elementRef.nativeElement.appendChild(element);\n            }\n        };\n    return CdkTable;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n];\nvar CdkTableModule = /*@__PURE__*/ (function () {\n    function CdkTableModule() {\n    }\n    return CdkTableModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule };\n//# sourceMappingURL=table.es5.js.map\n",null]}